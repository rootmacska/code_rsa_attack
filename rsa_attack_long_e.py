import quadratic_sieve as prime_fac

#print(prime_fac.factorize(n = 21986209349522598669810906865768024040510874833876982838576681331542309207547008218894072567095416373659497230133396569323359898371317789548133481802145312769895831863123149387038220821712773786960781756311664121510622866921173866500595409454901147010013471749478924826426822441873737331716495921635931883569963555187083485598206980529116827877795567026250074202265927360532074462873436662506582235080339443933241625359591476428997279199451820908821582619548286654231931531356251085596993523325271292315727665008270293782837742921563562663832006966733277787971278021005846570498685386487009374677868911522765753502223, b = 100000))

import owiener

import math  # for gcd function (or easily implementable to avoid import)
import random  # for random elements drawing in RecoverPrimeFactors

def failFunction():
    print("Prime factors not found")


def outputPrimes(a, n):
    p = math.gcd(a, n)
    q = int(n/p)
    if p > q:
        p, q = q, p
    print("Found factors p and q")
    print("p = {0}".format(str(p)))
    print("q = {0}".format(str(q)))
    print("Check p * q = ", p*q)
    return p, q


def RecoverPrimeFactors(n, e, d):
    """The following algorithm recovers the prime factor
            s of a modulus, given the public and private
            exponents.
            Function call: RecoverPrimeFactors(n, e, d)
            Input: 	n: modulus
                            e: public exponent
                            d: private exponent
            Output: (p, q): prime factors of modulus"""

    k = d * e - 1
    if k % 2 == 1:
        failFunction()
        return 0, 0
    else:
        t = 0
        r = k
        while(r % 2 == 0):
            r = r // 2
            t += 1
        for i in range(1, 101):
            g = random.randint(0, n)  # random g in [0, n-1]
            y = pow(g, r, n)
            if y == 1 or y == n - 1:
                continue
            else:
                for j in range(1, t):  # j \in [1, t-1]
                    x = pow(y, 2, n)
                    if x == 1:
                        p, q = outputPrimes(y - 1, n)
                        return p, q
                    elif x == n - 1:
                        continue
                    y = x
                    x = pow(y, 2, n)
                    if x == 1:
                        p, q = outputPrimes(y - 1, n)
                        return p, q

n = 21991232899020757667180708939003545471279700034913931387275370649484106213493746354134516938874683722532376522428739266831139982942037647489613088565834625396270116948482205233937311403693804017272705867342159850843308530001872731667565741346582215077293242970006473486509965365929587251903494207313928176058515727281298368666934123057519040352255360265190524877179165787262999219352376695956654193963802488345737739750543388868502221204357840956405751039414535031641247236228671392078875980200356717694181270438688970492725419513292742560009022330977944092829578706789218989389932864305999884300269715051661053097943
e = 65537

n = 24430436836352483797063096106414774550335403158860524990373856944254297586018983298705492233654830523199692736514219239319146510300625339876324647894404893431924815784960576423322270642064447439532880084271906506181596791330255472317736274838975886982878636272375371266076163692482358755032762905350584467818322896256697824686362875462689754439034305568485764372282041358336076968265549938271297558180529807346415680592340188076635410423523198461463168140415659131710799290510682225326203262832075315314659506065014839527357257670962979561415126272979988642044180466409976304796211964778255235614585976098809592350027
e = 65537

n = 21986209349522598669810906865768024040510874833876982838576681331542309207547008218894072567095416373659497230133396569323359898371317789548133481802145312769895831863123149387038220821712773786960781756311664121510622866921173866500595409454901147010013471749478924826426822441873737331716495921635931883569963555187083485598206980529116827877795567026250074202265927360532074462873436662506582235080339443933241625359591476428997279199451820908821582619548286654231931531356251085596993523325271292315727665008270293782837742921563562663832006966733277787971278021005846570498685386487009374677868911522765753502223
e = 13093328595385160044165980293174831781402910433996829686049849079194139027017437963020433409654254598967784284273088466083085543342666840110989310331142491498938291460305295086828226541498060829091531200764423401195922683471453468703721689465669372303425266741388904901165666303328872760703619023190687995422691546642616899901532563750227860076575848959768161075100460255012577625565123868435724583614883870330213257657190685096528432418456665538846807560061020585626974490286664652793908833669424000276680931369139404546215686214432257377137376327944301552319505561125394344205596939320029134879444106807878438488137

n2 = 11504527348504158734037780170377498878712004214260381608730500717991815279122806648544220211648205780154761466805683032692581326833774139612636039191040833561873869035670800926010549835734364594410395476885067722861580093389878040520372281552748236896416214306849077757975842715196976800713818245047806206651294270657799988276627708411462924090113406327688546733972246647011570643506334873954567135880261896080553702646403928357768206828842771519038916167325592923329250827223365152756794305129647653055443711932408387687334586308353275284499524570044721152926963826516772537698976072032292400126788019940915306214671
e2 = 4540739216185503944360317693727598425914265679950045193021325112310705634291619065008907799345804742158053789146296680446894494207857215362393461454740251861270045084357114733204905034770917891701793191139362007652012678514584941575186023625310517580446149923208688962903396756745069246710893893015854244396440602337384016923965920177062914455924380937065037932267969029224822211730100507762697227846127311177385930201779337513938673664269014723153905166514932029992336846458567909977502925990713226059794678425101890459773253915812357018757128150035920553537530136211737469309110690361713502937223534374706564266353

d = owiener.attack(e, n)
d2 = owiener.attack(e2, n2)

if d is None:
    print("Failed")
else:
    RecoverPrimeFactors(n,e,d)
    RecoverPrimeFactors(n2, e2, d2)
